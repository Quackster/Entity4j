package com.example.miniorm.mapping;

import java.lang.reflect.Field;
import java.util.*;

/** Fluent DSL, but **scoped** to a specific DbContext via its MappingRegistry. */
public final class ModelBuilder {
    private final MappingRegistry registry;
    public ModelBuilder(MappingRegistry registry) { this.registry = registry; }

    public <T> EntityBuilder<T> entity(Class<T> type) { return new EntityBuilder<>(registry, type); }

    public static final class EntityBuilder<T> {
        private final MappingRegistry reg;
        private final Class<T> type;
        private String table;
        private String idProp;
        private String idCol;
        private boolean idAuto;
        private final LinkedHashMap<String,String> propToColumn = new LinkedHashMap<>();

        EntityBuilder(MappingRegistry reg, Class<T> type) { this.reg = reg; this.type = type; }

        public EntityBuilder<T> toTable(String table) { this.table = table; return this; }

        public EntityBuilder<T> hasId(String idProperty, boolean autoGenerated) {
            this.idProp = idProperty; this.idAuto = autoGenerated;
            if (this.idCol == null) this.idCol = idProperty;
            propToColumn.putIfAbsent(idProperty, this.idCol);
            return this;
        }

        public EntityBuilder<T> idColumn(String idColumn) {
            this.idCol = idColumn;
            if (this.idProp != null) propToColumn.put(this.idProp, idColumn);
            return this;
        }

        public EntityBuilder<T> map(String property, String column) {
            propToColumn.put(property, column); return this;
        }

        public EntityBuilder<T> mapSame(String property) {
            propToColumn.put(property, property); return this;
        }

        public ModelBuilder done() {
            Objects.requireNonNull(table, "table");
            if (idProp != null && idCol == null) idCol = idProp;
            if (idProp != null) propToColumn.putIfAbsent(idProp, idCol);
            reg.register(new EntityMapping<>(type, table, idProp, idCol, idAuto, propToColumn));
            return new ModelBuilder(reg);
        }
    }
}