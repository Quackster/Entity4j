package org.oldskooler.entity4j.dialect.types;

import org.oldskooler.entity4j.annotations.Column;
import org.oldskooler.entity4j.dialect.SqlDialect;
import org.oldskooler.entity4j.mapping.ColumnMeta;
import org.oldskooler.entity4j.mapping.TableMeta;

import java.lang.reflect.Field;
import java.util.*;
import java.util.stream.Collectors;

public class PostgresDialect implements SqlDialect {
    @Override public String q(String ident) { return "\"" + ident.replace("\"","\"\"") + "\""; }
    @Override public boolean supportsCreateIfNotExists() { return true; } // PG supports it

    @Override public boolean useInsertReturning() { return true; }

    @Override
    public <T> String createTableDdl(TableMeta<T> m, boolean ifNotExists) {
        List<String> defs = new ArrayList<>();
        for (Map.Entry<String,String> e : m.propToColumn.entrySet()) {
            String prop = e.getKey(); String col = e.getValue();
            Field f = m.propToField.get(prop);
            boolean nullable = true; // ca == null || ca.nullable();
            boolean isId = (m.idField != null && f.getName().equals(m.idField.getName()));
            boolean auto = isId && m.idAuto;

            Column colAnn = f.getAnnotation(Column.class);

            if (colAnn == null) {
                if (m.columns.containsKey(col)) {
                    ColumnMeta meta = m.columns.get(col);
                    nullable = meta.nullable;
                }
            } else {
                nullable = colAnn.nullable();
            }

            String type = resolveSqlType(m, f, col);
            // In PG prefer identity columns for auto ids
            if (auto) type = "BIGINT GENERATED BY DEFAULT AS IDENTITY";

            StringBuilder d = new StringBuilder(q(col)).append(' ').append(type);
            if (!nullable) d.append(" NOT NULL");
            defs.add(d.toString());
        }
        if (m.idColumn != null) defs.add("PRIMARY KEY (" + q(m.idColumn) + ")");
        return "CREATE TABLE" + (ifNotExists ? " IF NOT EXISTS" : "") + " " + q(m.table) +
                " (\n  " + String.join(",\n  ", defs) + "\n)";
    }

    @Override
    public <T> String dropTableDdl(TableMeta<T> m, boolean ifExists) {
        return "DROP TABLE" + (ifExists ? " IF EXISTS" : "") + " " + q(m.table);
    }

    @Override
    public String autoIncrementClause() {
        return "  PRIMARY KEY";
    }

    @Override
    public <T> String resolveSqlType(TableMeta<T> m, Field f, String col) {
        Column colAnn = f.getAnnotation(Column.class);

        String user = null;
        int precision = 0;
        int scale = 0;
        int length = -1;

        if (colAnn == null) {
            if (m.columns.containsKey(col)) {
                ColumnMeta meta = m.columns.get(col);

                user = SqlDialect.userTypeOrNull(meta.effectiveType());
                precision = meta.precision;
                scale = meta.scale;
                length = meta.length;
            }
        } else {

            user = SqlDialect.userTypeOrNull(colAnn.type());
            precision = colAnn.precision();
            scale = Math.max(0, colAnn.scale());
            length = colAnn.length();
        }

        if (user != null) {
            if ((user.contains("CHAR") || user.equals("VARCHAR")) && length > 0) return user + "(" + length + ")";
            if ((user.equals("DECIMAL") || user.equals("NUMERIC")) && precision > 0)
                return "NUMERIC(" + precision + "," + scale + ")";
            return user;
        }
        if (precision > 0) return "NUMERIC(" + precision + "," + scale + ")";
        if (length > 0 && f.getType() == String.class) return "VARCHAR(" + length + ")";


        Class<?> t = f.getType();
        if (t == Long.class || t == long.class) return "BIGINT";
        if (t == Integer.class || t == int.class) return "INTEGER";
        if (t == Short.class || t == short.class) return "SMALLINT";
        if (t == Byte.class || t == byte.class) return "SMALLINT";
        if (t == Double.class || t == double.class) return "DOUBLE PRECISION";
        if (t == Float.class || t == float.class) return "REAL";
        if (t == Boolean.class || t == boolean.class) return "BOOLEAN";
        if (t == java.math.BigDecimal.class) return "NUMERIC(38,10)";
        if (t.getName().equals("java.util.UUID")) return "UUID";
        if (t == java.time.LocalDate.class || t == java.sql.Date.class) return "DATE";
        if (t == java.time.LocalDateTime.class || t == java.sql.Timestamp.class) return "TIMESTAMP(6)";
        if (t == java.time.Instant.class) return "TIMESTAMP(6) WITH TIME ZONE";
        return "VARCHAR(255)";
    }

    @Override
    public <T> String buildInsertSql(TableMeta<T> m, List<String> cols) {
        String placeholders = String.join(", ", java.util.Collections.nCopies(cols.size(), "?"));
        String base = "INSERT INTO " + q(m.table) + " (" +
                String.join(", ", cols.stream().map(this::q).collect(Collectors.toList())) + ") VALUES (" + placeholders + ")";
        return (m.idColumn != null) ? base + " RETURNING " + q(m.idColumn) : base;
    }

    @Override
    public String insertReturningSuffix(TableMeta<?> m) {
        return " RETURNING " + q(m.idColumn);
    }
}
